<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教學 on WANcatServer</title>
    <link>https://wancat.cc/categories/%E6%95%99%E5%AD%B8/</link>
    <description>Recent content in 教學 on WANcatServer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 17 May 2020 22:17:08 +0800</lastBuildDate>
    
	<atom:link href="https://wancat.cc/categories/%E6%95%99%E5%AD%B8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raspberry Pi 安裝 WordPress 教學</title>
      <link>https://wancat.cc/post/wordpress-installation/</link>
      <pubDate>Sun, 17 May 2020 22:17:08 +0800</pubDate>
      
      <guid>https://wancat.cc/post/wordpress-installation/</guid>
      <description>WordPress 是一套自由的網站系統，可以安裝在自己的伺服器，以下是我在 Raspberry Pi 上安裝 WordPress 的記錄。
請先安裝好 MariaDB / MySQL、PHP 7.3 以上、Caddy。
到官網複製壓縮檔連結（我偏好 tar.gz）
cd Downloads wget https://wordpress.org/latest.tar.gz sudo tar -zxvf latest.tar.gz -C /var/www sudo chown -R www-data:www-data /var/www/wordpress 接著建立 MySQL 使用者：
sudo mysql &amp;gt; create database wordpress; &amp;gt; create user &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;password&#39;; &amp;gt; grant all privileges on wordpress . * to &#39;wordpress&#39;@&#39;localhost&#39;; &amp;gt; flush privileges; 接下來將域名綁定到 Web Server，這邊我們使用 Caddy
yourhostname.com { root /var/www/wordpress gzip fastcgi / /var/run/php/php7.</description>
    </item>
    
    <item>
      <title>在 Raspberry Pi 安裝 Nextcloud</title>
      <link>https://wancat.cc/post/nextcloud-installation/</link>
      <pubDate>Tue, 11 Feb 2020 14:40:06 +0800</pubDate>
      
      <guid>https://wancat.cc/post/nextcloud-installation/</guid>
      <description>Nextcloud 是一套自由的雲端硬碟系統，可以讓你自己架設像 Google Drive、One Drive 一般的雲端硬碟，將資料掌握在自己手中，本篇紀錄如何在樹梅派安裝 Nextcloud。
安裝 到官方網站下載壓縮檔
sudo unzip -d /var/www nextcloud-18.0.0.zip sudo chown www-data:www-data /var/www/nextcloud  PHP 安裝 PHP 依賴模組
sudo apt install php-gd php-json php-mysql php-curl php-mbstring php-intl php-imagick php-xml php-zip  參閱 官方文件 檢查依賴的 PHP 模組，或是擴充功能像是 smb、ldap 等等。
MySQL 建立 Nextcloud 的資料庫和使用者
$ sudo mysql &amp;gt; create database nextcloud; &amp;gt; create user &#39;nextcloud&#39;@&#39;localhost&#39; identified by &#39;password&#39;; &amp;gt; grant all privileges on nextcloud . * to &#39;nextcloud&#39;@&#39;localhost&#39;; &amp;gt; flush privileges;  Caddy 複製 Caddy 提供的 Nextcloud Caddyfile 到 /etc/caddy/Caddyfile，接著修改成你自己的域名、PHP 路徑。我的設定檔如下：</description>
    </item>
    
    <item>
      <title>用 TOTP 擺脫簡訊驗證碼：安全好用的兩步驟驗證</title>
      <link>https://wancat.cc/post/totp/</link>
      <pubDate>Fri, 07 Feb 2020 19:22:30 +0800</pubDate>
      
      <guid>https://wancat.cc/post/totp/</guid>
      <description>兩步驟驗證 隨著數位身份在生活中的影響力愈來愈大，只靠著一組密碼來保護我們的帳戶已經不夠安全，而且記密碼實在是違反人腦天性的行為，因此大部分人總是使用重複的、好記的脆弱密碼。要解決這個問題，除了使用密碼管理工具來幫你記密碼，還可以透過設定兩步驟驗證（2FA：Two-Factor Authentication），大大提昇帳戶的安全性。
兩步驟驗證就是在密碼之外，多用一個資訊來驗證你是本人，主流的作法有像 Email、簡訊驗證信，但用過的人可能都會覺得登入時要開信箱收信很麻煩，信箱也會被這些信件給弄亂，更別提當人在國外時，簡訊收不到害你無法登入。
今天要介紹的 TOTP: Time-based One-Time Password algorithm，就是一種公開的標準，讓你透過手機上的 APP 產生一組 6 位數的一次性驗證碼進行登入，而且在沒有網路的情況下還能使用！
TOTP 如何運作？ TOTP 的概念，就是網站與你事先約定好一組金鑰，並以當下的時間作為參數，運算出一個雜湊值，並取最後 6 位數作為一次性密碼。
然而如果網站和使用者的時間不同的話，就無法計算出相同的結果，因此通常會以 30 秒作為一個單位，來避免使用者與網站的時間差。網站為了良好的使用者體驗，通常也會允許前一次的一次性密碼。
TOTP 的優點 TOTP 它是一個公開標準，你不需要依賴單一企業或組織，各種客戶端都能相容；它的安全性基於密碼學，而非第三方機構的信用；它是去中心化驗證，整個驗證流程只有要驗證身份的雙方而已。
Google 可以讀你的 Gmail，簡訊也可以被政府或通訊業者攔截，然而 TOTP 不需要依賴中介機構，甚至在離線的情況下也仍然可用。
同時對於服務提供者而言，TOTP 也很容易實做，不需要花錢去發簡訊或是寄 Email 被當成垃圾郵件，也不需要跟第三方機構申請，是個省錢又安全的好方法。
開始使用 TOTP 儘管目前懂得使用 TOTP 的使用者並不多，但其實已經有相當多網站支持以 TOTP 作為驗證方式，例如 Google、Facebook、Apple、Amazon、GitHub、PayPal 等，我管理伺服器需要用到的 CloudFlare、Linode、Porkbun 也都有設定 TOTP 來提高安全性。
開始使用的第一步是下載一個 TOTP 的應用程式，有非常多的選項，我自己使用的是 Authy，界面簡單易用，提供加密的雲端備份，此外還有 Google Authenticator、Microsoft Authenticator，自由軟體則有 Red Hat 開發的 FreeOTP，先前在密碼管理工具提到的 Bitwarden 的付費版也有提供 TOTP 的功能。
安裝好驗證器後，到你要登入的網站或 APP 的帳號設定中，啟動兩步驟驗證，在不同網站中，可能會以「驗證應用程式」、「谷歌驗證器」、「代碼產生器」等名稱出現，但背後都是 TOTP 這套標準，流程也很簡單，網站會將金鑰以 QR Code 的方式顯示，打開手機上的驗證器程式掃描就可以加入帳號，並輸入產生的一次性密碼供網站確認，就可以完成綁定。網站若是在手機上，則可以用「複製金鑰」的方式來手動輸入金鑰。</description>
    </item>
    
    <item>
      <title>Caddy 安裝教學</title>
      <link>https://wancat.cc/post/caddy/</link>
      <pubDate>Tue, 04 Feb 2020 10:39:46 +0800</pubDate>
      
      <guid>https://wancat.cc/post/caddy/</guid>
      <description>Caddy 是一個由 Go 撰寫的 Web Server，其主要賣點是簡單的設定檔，適合在開發環境中快速架設，還有自動 HTTPS 的功能，相當方便。
我之前在 Linode 上就使用 Caddy，覺得體驗相當好，因此這次也選擇使用它。
安裝 到 Caddy 網站的下載頁面，複製 One-step installer script 就可以一鍵安裝。
curl https://getcaddy.com | bash -s personal 如果是要拿來當開發環境中的 Web Server，這樣就足夠了，但我要讓它在背景執行，因此還需要設定好它的 systemd。
Systemd 請參考官方的安裝教學，照著做就行了，比較容易踩雷的是取得憑證的部份，首先 Let&amp;rsquo;s Encrypt 會對你做 DNS challenge，所以如果是使用 CloudFlare 的，要把 Proxy 關掉（雲朵）。再來是寫設定檔，Caddy 的設定檔相當簡單，不過用 systemd 就是很難除錯（看 log 麻煩），所以建議先自己用 sudo caddy -conf /etc/caddy/Caddy 測試設定檔，等到沒問題再用 systemd 開。
設定檔範例 以下是我網站使用的設定檔
matomo.wancat.cc { root /var/www/matomo gzip fastcgi / /var/run/php/php7.3-fpm.sock php { index index.php } } lincalvino.me/narcissism { root /var/www/narcissism } lincalvino.</description>
    </item>
    
    <item>
      <title>CloudFlare 設定 DDNS 教學</title>
      <link>https://wancat.cc/post/cloudflare-ddns/</link>
      <pubDate>Tue, 04 Feb 2020 10:35:52 +0800</pubDate>
      
      <guid>https://wancat.cc/post/cloudflare-ddns/</guid>
      <description>最近剛入手一個 Raspberry Pi，用來作為一個省電的伺服器，本來困擾自己家裡的固定 IP 已經給了其他台伺服器，但找到方法用 CloudFlare 實現 DDNS。
CloudFlare DDNS CloudFlare 本身沒有官方的 DDNS 支援，但可以用 CloudFlare API 實做，我找了一個別人做好的 CloudFlare-ddns，折騰一會兒就設定好了。
首先安裝 cloudflare-ddns 和其依賴，然後以我要設定 pi.wancat.cc 為例，建立 site_pi.yaml 設定檔，填入以下內容：
%YAML 1.2 # CloudFlare DDNS updater script config. --- # CloudFlare API key # You can find this under Account &amp;gt; My account after logging into CloudFlare. cf_key: &#39;your key&#39; # Email address for your CloudFlare account. cf_email: &#39;your email&#39; # Domain you&#39;re using CloudFlare to manage.</description>
    </item>
    
    <item>
      <title>Google Analytics 替代方案 Matomo 安裝教學</title>
      <link>https://wancat.cc/post/matomo-installation/</link>
      <pubDate>Tue, 04 Feb 2020 10:27:38 +0800</pubDate>
      
      <guid>https://wancat.cc/post/matomo-installation/</guid>
      <description>因為實在不想再讓 Google 拿到資料了，所以我到 No More Google 網站上找 Google Analytics 的替代方案，第一名就是 Matomo。
Matomo 是一個自架的流量分析程式，是自由軟體，也有提供付費的 Cloud hosting 服務。我在試用後覺得還不錯，就決定自行在 Raspberry Pi 上安裝。因為是自架的，所以資料都在自己手上，不會被 Google 拿去利用。
安裝方式參考官方文件。
環境需要 PHP、MySQL or MariaDB
PHP 安裝：
sudo apt-get install php7.0 php7.0-curl php7.0-gd php7.0-cli mysql-server php7.0-mysql php-xml php7.0-mbstring 資料庫我比較偏好社群維護的 MariaDB：
sudo apt install mariadb-server sudo mysql_secure_installation 建議在執行 mysql_secure_installation 來強化安全性。
由於我使用 Caddy，所以 Caddyfile 中要加入以下程式：
matomo.wancat.cc { root /var/www/matomo # 換成你的 matomo 位置 gzip fastcgi / /var/run/php/php7.3-fpm.sock php { index index.php } } 然後打開網頁，就可以看到安裝程式了。接著要幫 Matomo 設定好 SQL User 和 Database，</description>
    </item>
    
    <item>
      <title>Hugo 安裝 LikeCoin 教學</title>
      <link>https://wancat.cc/post/hugo-install-likecoin/</link>
      <pubDate>Mon, 03 Feb 2020 18:50:39 +0800</pubDate>
      
      <guid>https://wancat.cc/post/hugo-install-likecoin/</guid>
      <description>取代 Hexo 我使用 Hexo 作為靜態網站生成器已經一年半，然而它有些我越來越難忍受的缺點，加上認識了由 Go 寫成的 Hugo，我在使用 Hugo 建立了幾個網站作為練習後，決定將自己的部落格改到 Hugo。
Hexo 仍然是一套很棒的工具，我主要是覺得它每次執行都要等大約十秒的時間，讓我很不耐煩；另外它的 server 功能有些缺陷，有時候改變內容會讓它變成 Untitled Post，不過我也沒有很認真的想要解決就是了。
Hugo 是 Go 寫的工具，所以是編譯好的，效能很高，server 功能也很棒，content 的管理更有彈性，整個網站也有更高的配置空間，但使用難度較高，每個 theme 的差異度很大，必須依據使用的 theme 去調整。
我覺得對新手來說 Hexo 是比較好的選擇，一開始就有預設 theme，整個架構也比較固定，內建的 deploy 指令能支援大部分平台，但如果想要有更高的自訂化，我覺得 Hugo 比較合適。
Theme 這次我選了 CleanWhite 這套主題，功能強大，設計的很好，非常感謝作者 Huabing Zhao。因為 Hexo 跟 Hugo 都是使用 Markdown 作為文章格式，連標頭格式都差不多，所以基本上是無痛轉移，只有圖片的部份需要重新插入，因為 Hexo 的「資產資料夾」是使用其特殊語法，所以轉移後需要自己手動改成標準的格式。
插入 LikeCoin Hugo 可以使用自訂 Layout 的方式，在不改變主題的情況下改變網站設計，我透過這個方式在每個文章下放了 LikeButton。
我們先 overwrite 文章的模板，將 theme 的 layouts 資料夾複製到專案目錄下。
cp -r theme/YOUR_THEME/layouts/ . Hugo 中的 Partial 功能，可以讓你建立小模板，嵌入在頁面中。參考文件。在 layouts 的 partials 資料夾建立 likecoin.</description>
    </item>
    
    <item>
      <title>ORM 入門：如何區分 ORM 中的關聯</title>
      <link>https://wancat.cc/post/orm/</link>
      <pubDate>Fri, 26 Jul 2019 10:49:46 +0000</pubDate>
      
      <guid>https://wancat.cc/post/orm/</guid>
      <description>最近初次接觸 ORM——Object-relational mapping——這個強大的工具，但是為其中的關聯而苦惱不已。在仔細研究後終於了解其差異，本篇文章透過一個圖書館專案的實例，使用 Golang + GORM 來實做，並輔以 SQL 做說明，讓已經學會 SQL 而想要了解 ORM 的人真的「懂」如何設計 Relation。
什麼時候會用到 Relation？ ORM 中的 Relation 就是相當於 SQL 中的各種 Join，用來將不同表格中的資料串起。由於 ORM 是用物件，所以如果未來有關聯到其他表格的需求，必須在物件設計時就包含進來。
來定義需求吧！我們今天假設情境是要定義一個圖書館的資料庫，那我們會有編目資料 Book（書的資料）、館藏資料 Item（書的實體），作者資料 Author，出版社資料 Publisher。書名、ISBN 等等跟關聯沒有關係的就不放入。
我們先不要討論 gorm 要怎麼寫，先把要取得的資料擺出來。
type Book struct { Items []Item Authors []Author Publisher Publisher } type Item struct { Book Book } type Author struct { Works []Book } type Publisher struct { Publication []Book } 我們要讓所有的 structure 都能夠參考到依賴自己的對象：作者必須參考到作品集、出版社要能參考出版品、分類要能找出其中的所有書籍。
接下來我們一個一個釐清物件之間的關聯關係，來設計 ORM 吧！</description>
    </item>
    
    <item>
      <title>如何在 Linux 使用 Caps Lock 切換輸入法</title>
      <link>https://wancat.cc/post/capslock/</link>
      <pubDate>Sat, 06 Jul 2019 20:12:00 +0000</pubDate>
      
      <guid>https://wancat.cc/post/capslock/</guid>
      <description>Caps Lock 是一個我們很少用的鍵，偏偏它擺在鍵盤的黃金位置，實在是大大的浪費，在 Mac 上可以使用 Caps Lock 來作為中英切換鍵，我認為是很好的設計，以下教學將介紹如何用指令列來設定 Fcitx 使用 Caps Lock 來切換輸入法。
事實上 Fcitx 可以使用任何鍵作為輸入法切換鍵，然而因為 Caps Lock 有著切換大小寫的功能，如果不將此功能關閉，輸入法會發生異常——中文切到英文後變成大寫，因此我們要利用 xmodmap 工具來將 Caps_Lock 鍵指向到不會使用到的 Multi_key，再將 Fcitx 切換鍵對應到 Multi_key。
我們先查詢一下 Caps_Lock 對應到的 keycode 是多少。
$ xmodmap -pke | grep Caps_Lock keycode 66 = Caps_Lock NoSymbol Caps_Lock 可以看到鍵盤上的 Caps_Lock 對應到的是 66 這個 keycode，那我們接下來就是要將 66 改成對應到 Multi_key。
$ xmodmap -pke &amp;gt; ~/.Xmodmap	#將設定存為檔案 $ vim ~/.Xmodmap # 將 keycode 66 處改為 keycode 66 = Multi_key NoSymbol Multi_key # 在最底下加入 clear lock $ xmodmap ~/.</description>
    </item>
    
    <item>
      <title>YaCy安裝教學</title>
      <link>https://wancat.cc/post/yacy-install/</link>
      <pubDate>Sat, 22 Sep 2018 20:26:23 +0000</pubDate>
      
      <guid>https://wancat.cc/post/yacy-install/</guid>
      <description>YaCy是一個開源的點對點搜尋引擎 本文將講解如何在 Ubuntu Server 上安裝 YaCy 搜尋引擎，並用Nginx做反向代理，將網址改成像是 yacy.example.com 的形式。
 YaCy 架好的範例可以來我架設的伺服器使用看看https://yacy.wancatserver.tk
環境說明 本文假設有一台無圖形界面的伺服器以及有圖形界面的Desktop。Desktop必須要能夠使用瀏覽器。 假設伺服器網域： example.com，請將本文所有example.com改成你的網域名稱 假設使用者名稱：user ，請換成自己的使用者名稱
 如果沒有網域名稱仍然可以安裝 YaCy ，只是需要用 ip:8090 的形式來連上它。 如果沒有真實 ip 就只能在內網使用
 伺服器安裝 Java 8 YaCy可以使用 OpenJDK，也可以使用Oracle官方的JRE。 OpenJDK使用apt安裝
$ sudo apt install openjdk-8-jre 官方的JRE比較麻煩，可參考此文章
安裝 YaCy 至官網下載程式。
{% asset_img slug download.png %}
將程式上傳至伺服器，請將/path/to/yacy.tar.gz替換成你下載的路徑
$ scp /path/to/yacy.tar.gz user@example.com:/home/user/ 接下來以ssh登入伺服器
$ ssh user@example.com 解壓縮，將yacy.tar.gz替換成你下載的路徑
$ tar -zxvf yacy.tar.gz 解壓縮完可以看到家目錄下多了一個目錄yacy，裡面有 startYACY.sh, stopYACY.sh, killYACY.sh, reconfigureYACY.sh, updateYACY.sh等執行檔，以及許多資料夾。
我們先去打開防火牆，YaCy使用的是 8090 port (HTTP)，以及8443 (HTTPS)。</description>
    </item>
    
  </channel>
</rss>