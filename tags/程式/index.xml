<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程式 on WANcatServer</title>
    <link>https://www.wancat.cc/tags/%E7%A8%8B%E5%BC%8F/</link>
    <description>Recent content in 程式 on WANcatServer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 26 Jul 2019 10:49:46 +0000</lastBuildDate>
    
	<atom:link href="https://www.wancat.cc/tags/%E7%A8%8B%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ORM 入門：如何區分 ORM 中的關聯</title>
      <link>https://www.wancat.cc/post/orm/</link>
      <pubDate>Fri, 26 Jul 2019 10:49:46 +0000</pubDate>
      
      <guid>https://www.wancat.cc/post/orm/</guid>
      <description>最近初次接觸 ORM——Object-relational mapping——這個強大的工具，但是為其中的關聯而苦惱不已。在仔細研究後終於了解其差異，本篇文章透過一個圖書館專案的實例，使用 Golang + GORM 來實做，並輔以 SQL 做說明，讓已經學會 SQL 而想要了解 ORM 的人真的「懂」如何設計 Relation。
什麼時候會用到 Relation？ ORM 中的 Relation 就是相當於 SQL 中的各種 Join，用來將不同表格中的資料串起。由於 ORM 是用物件，所以如果未來有關聯到其他表格的需求，必須在物件設計時就包含進來。
來定義需求吧！我們今天假設情境是要定義一個圖書館的資料庫，那我們會有編目資料 Book（書的資料）、館藏資料 Item（書的實體），作者資料 Author，出版社資料 Publisher。書名、ISBN 等等跟關聯沒有關係的就不放入。
我們先不要討論 gorm 要怎麼寫，先把要取得的資料擺出來。
type Book struct { Items []Item Authors []Author Publisher Publisher } type Item struct { Book Book } type Author struct { Works []Book } type Publisher struct { Publication []Book } 我們要讓所有的 structure 都能夠參考到依賴自己的對象：作者必須參考到作品集、出版社要能參考出版品、分類要能找出其中的所有書籍。
接下來我們一個一個釐清物件之間的關聯關係，來設計 ORM 吧！</description>
    </item>
    
  </channel>
</rss>